// --------------------------------------Логические операторы "И", "ИЛИ", "НЕ"-----------------------------------------

// В логических операциях осуществляется приведение типов операндов к true или false. Приведение происходит если в коде обнаружен логический оператор.
// Нужно запомнить 6 ложных (falsy) значений, приводящихся к false в логическом преобразовании:
// 0, NaN, null, undefined, пустая строка и false.
// Абсолютно все остальное приводится к true.

//------------------------------------------Логический оператор "И"---------------------------------------------------

// Логический оператор "И" в написании кода обозначается:&&
// Логическое "И" является более приоритетным чем логическое "ИЛИ".
// Оператор && приводит все операнды к булю и возвращает значение одного из них.
// Если хотя бы один из операндов будет приведён к false, результатом выражения будет его значение.
// Логическое "И" возвращает либо первое значение, которое привело к false, либо последний элемент.
// При выполнении логического «И», правый операнд может не вычисляться, в случае если левый был приведен к false.

// const age = 50;
// console.log(age > 10 && age < 30); // true && false -> false
// console.log(age > 80 && age < 120); // false && true -> fals

// То есть логическое «И» запинается на лжи и возвращает то на чём запнулось или последний операнд.

// console.log(1 && 5); // true && true -> 5
// console.log(5 && 1); // true && true -> 1
// console.log(0 && 2); // false && true -> 0
// console.log(2 && 0); // true && false -> 0
// console.log("" && "Mango"); // false && true -> ""
// console.log("Mango" && ""); // true && false -> ""
// console.log("Mango" && "Poly"); // true && true -> "Poly"
// console.log("Poly" && "Mango"); // true && true -> "Mango"

// ---------------------------------------------Логический оператор "ИЛИ"--------------------------------------------------

// Логический оператор "ИЛИ" в написании кода обозначается:||
// Логическое "ИЛИ" является менее приоритетным чем логическое "И".
// Оператор || приводит все операнды к булю и возвращает значение одного из них.
// Если хотя бы один из операндов будет приведён к true, результатом выражения будет его значение.+
// Логическое "ИЛИ" возвращает либо первое значение, которое привело к true, либо последний элемент.
// При выполнении логического «ИЛИ», правый операнд может не вычисляться, в случае если левый был приведен к true.

// В следующем примере условие слева вернёт true, поэтому результатом всего выражения будет true - вернётся значение первого операнда которое было приведено к true.

// const age = 5;
// console.log(age < 10 || age > 30); // true || false -> true

// А здесь ни одно из условий не выполняется, поэтому получаем false - значение последнего операнда.

// const age = 20;
// console.log(age < 10 || age > 30); // false || false -> false

// То есть логическое «ИЛИ» запинается на правде и возвращает то на чём запнулось или последний операнд.

// console.log(true || false); // true
// console.log(false || true); // true
// console.log(true || true); // true

// console.log(3 || false); // 3
// console.log(false || 3); // 3
// console.log(3 || true); // 3
// console.log(true || 3); // true

// -----------------------------------------------Логический оператор "НЕ"---------------------------------------------

// Логический оператор "ИЛИ" в написании кода обозначается:!
// Все операторы которые мы рассматривали до этого были бинарными - содержащими два операнда, левый и правый.
// Логическое «НЕ» это унарный оператор - выполняющий операцию над одним операндом справа.

// Оператор ! приводит операнд к булю, если необходимо, а затем делает инверсию - заменяет его на противоположный
// true -> false или false -> true.

// console.log(!true); // false
// console.log(!false); // true
// console.log(!3); // !3 -> !true -> false
// console.log(!"Mango"); // !"Mango" -> !true -> false
// console.log(!0); // !0 -> !false -> true
// console.log(!""); // !"" -> !false -> true

// const isOnline = true;
// const isNotOnline = !isOnline; // !isOnline -> !true -> false
