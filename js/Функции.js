// !======================================================Функции========================================================

// Функция - это подпрограмма, независимая часть кода, предназначенная для многократного выполнения конкретной задачи с разными начальными значениями. Функции позволяют структурировать большие программы, уменьшают повторение и изолируют код.

// Функцию можно представить как чёрный ящик, она получает что-то на входе (данные), и возвращает что-то на выходе (результат выполнения кода внутри неё).

// 1. Объявление функции multiply
// function multiply() {
// Тело функции
//     console.log("Это лог при вызове функции multiply");
//   }

// 2. Вызовы функции multiply
//   multiply(); // 'Это лог при вызове функции multiply'
//   multiply(); // 'Это лог при вызове функции multiply'
//   multiply(); // 'Это лог при вызове функции multiply'

//   Объявление функции (function declaration) начинается с ключевого слова function, за которым идёт её имя - глагол отвечающий на вопрос «Что сделать?» и пара круглых скобок.

//   Тело функции заключено в фигурные скобки {} и содержит инструкции которые необходимо выполнить при её вызове. Затем, когда необходимо, функция вызывается с помощью имени и пары круглых скобок.

//! ---------------------------------------// 1 Function Declaration (Объявление функции)-----------------------

// function имя(параметры) {
//тело(код) функции
// }

// Во время объявления функции значения в круглых скобках называются - параметры,
// а в момент вызова функции значения в круглых скобках называются - аргументы.

// Имена функции и их предназначение:

// 'show' - что-то показывает
// 'get' - возвращает значение
// 'calc' - что-то вычисляет
// 'create' - что-то создаёт
// 'check' -что-то проверяет

// Примеры названий функций:

// showMessage - показать сообщение
// getOptions - получить параметры
// calcSum - посчитать сумму

// ?--Пример функции, выводящей в консоль числа от 0 до 50-----------

// function func() {
// for (let i = 0; i <= 50; i += 1) {
//   console.log(i);
// }
// }
// func();

//? --Пример функции, выводящей в консоль сумму чисел от 50 до 200----

// function total() {
//   let sum = 0;
//   for (let i = 50; i <= 200; i += 1) {
//     sum += i;
//   }
//   console.log('Сумма чисел от 50 до 200 :', sum);
// }
// total();

//? --Пример функции, которая параметром принимает число и выводит в консоль куб этого числа

// function func(num) {
//   console.log(num ** 3);
// }
// func(2);
// func(3);
// func(4);
// func(5);

//? --Пример функции, которая параметром принимает число и проверяет - положительное это число или отрицательное

// function func(num) {
//   if (num > 0) {
//     console.log('+++');
//   } else if (num < 0) {
//     console.log('---');
//   } else {
//     console.log('0 (ноль)');
//   }
// }
// func(5);
// func(-3);
// func(0);

//? --Пример функции, которая параметрами принимает несколько чисел и суммирует эти числа

// function func(num1, num2, num3) {
//   console.log('Сумма чисел :', num1 + num2 + num3);
// }
// func(2, 3, 4);.

//? --Пример функции, которая параметрами принимает переменные и суммирует их значения

// function func(num1, num2, num3) {
//   console.log('Сумма чисел :', num1 + num2 + num3);
// }

// let param1 = 3;
// let param2 = 4;
// let param3 = 5;

// func(param1, param2, param3);

//? --Пример функции, которая параметрами принимает числа, но при отсутствии параметров имеет параметры по умолчанию

// function func(num1 = 0, num2 = 0) {
//   console.log(num1 + num2);
// }

// func(2, 3);
// func(3);
// func();

//? --Примеры функций с применением инструкции return

// Пример 1

// function func(num) {
//   return num ** 3;
// }
// const res = func(3);
// console.log(res);

// ------------------------

// Пример 2

// function func(num) {
//   return num ** 0.5;
// }
// const num1 = func(9);
// const num2 = func(4);
// const sum = num1 + num2;
// console.log(sum);

// ---------------------------

// Пример 3

// function func(a, b) {
//   if (a > b) {
//     return true;
//   } else {
//     return false;
//   }
// }
// console.log(func(2, 3));

// ----------------------------

// Пример 4

// function func(a, b) {
//   return a > b;
// }
// console.log(func(2, 3));// Этот пример является упрощенным вариантом примера № 3

//? --Пример функции, которая проверяет, есть ли в массиве два одинаковых элемента подряд

// function fun(array) {
//     for (let i = 1; i < array.length; i++) {
//       if (array[i] === array[i - 1]) {
//         return true;
//       }
//     }
//     return false;
//   }

// Примеры использования функции:
//   console.log(fun([1, 2, 2, 3, 4])); // true, две 2 идут подряд
//   console.log(fun([1, 2, 3, 3, 4])); // true, две 3 идут подряд
//   console.log(fun([1, 2, 3, 4, 5])); // false, нет одинаковых элементов подряд

//? --Пример функции, которая параметром будет принимать число и проверять, что все цифры этого числа являются нечетными

// function func(number) {
//   return number
//     .toString() // Преобразуем число в строку
//     .split('') // Разбиваем строку на массив цифр
//     .every((digit) => parseInt(digit, 10) % 2 !== 0);
// }

// Примеры использования функции:
// console.log(func(13579)); // true, все цифры нечётные
// console.log(func(12345)); // false, одна из цифр чётная (2)
// console.log(func(777)); // true, все цифры нечётные

//? --Пример функции, которая принимает строку, а возвращает массив символов этой строки

// function func(string) {
//     return string.split('');
//   }
//   const string = '12345';
//   console.log(func(string))

//? --Пример функции, которая принимает строку и переворачивает её символы в обратном порядке

// function func(string) {
//     return string.split('').reverse().join('');
//   }
//   const string = 'Hello, World!';
//   console.log(func(string));

//? --Пример функции, которая параметром будет принимать строку и делать заглавной первую букву каждого слова этой строки.

// function func(string) {
//   const words = string.split(' ');
//   const func = [];
//   for (let word of words) {
//     func.push(word.charAt(0).toUpperCase() + word.slice(1));
//   }
//   return func.join(' ');
// }
// const string = 'hello, world!';
// console.log(func(string));

// ?--Пример функции, заполняющую массив целыми числами от 1 до заданного числа.

// function func(arr) {
//     const result = [];
//     for (let i = 1; i <= arr; i += 1) {
//       result.push(i);
//     }
//     return result;
//   }
//   const arr = 10; // Задайте нужное значение
//   const numbers = func(arr);
//   console.log(numbers);

//? --Пример функции, которая параметром будет принимать число и возвращать сумму его цифр.

// function func(number) {
//     const string = number.toString(); // Преобразуем число в строку
//     let sum = 0;
//     for (let i = 0; i < string.length; i += 1) {
//       const digit = parseInt(string[i], 10); // Преобразуем символ в число. Число 10 означает десятиричную систему счисления.
//       sum += digit;
//     }
//     return sum;
//   }
//   const number = 12345; // Задайте нужное число
//   const sum = func(number);
//   console.log(sum); // Вывод суммы цифр числа

//? --Пример функции, которая параметром будет принимать секунды, а возвращать количество суток, соответствующих этим секундам.

// function func(seconds) {
//     const secondsInADay = 86400;
//     const days = seconds / secondsInADay;
//     return days;
//   }
//   console.log(func(172800));

//? --Пример функции, которая будет возвращать случайный элемент из массива.

// function func(arr) {
//     const randomIndex = Math.floor(Math.random() * arr.length); // Генерируем случайный индекс от 0 до длины массива минус 1
//     return arr[randomIndex]; // Возвращаем элемент с полученным индексом
//   }
//   const arr = [1, 2, 3, 4, 5];
//   const randomElement = func(arr);
//   console.log(randomElement); // Выведет случайный элемент из массива

//? --Пример функции, которая параметром будет принимать число и проверять, простое оно или нет.

// function func(number) {
//   if (number <= 1) {
//     return false;
//   }
//   if (number <= 3) {
//     return true;
//   }
//   if (number % 2 === 0 || number % 3 === 0) {
//     return false;
//   }
//   for (let i = 5; i * i <= number; i += 6) {
//     if (number % i === 0 || number % (i + 2) === 0) {
//       return false;
//     }
//   }
//   return true;
// }
// console.log(func(17)); // Выведет true, так как 17 - простое число
// console.log(func(15)); // Выведет false, так как 15 - не простое число

// ------------------------------------------Алгоритм выполнения функции--------------------------------------

// function foo(array) {
//   for (let i = 0; i < array.length; i += 1) {
//     array[i] *= 2;
//   }
// }
// const numbers = [1, 2, 3, 4, 5];
// foo(numbers);
// console.log(numbers);

// 1. Объявляется функция foo, которая принимает один аргумент array. Этот аргумент представляет собой массив.

// 2. Внутри функции foo объявляется локальная переменная i, которая инициализируется значением 0. Эта переменная будет использоваться для перебора элементов массива array.

// 3. С помощью цикла for начинается перебор элементов массива array. Цикл выполняется от i = 0 до i меньше, чем длина массива array (то есть i < array.length).

// 4. На каждой итерации цикла текущий элемент массива, находящийся под индексом i, умножается на 2. Это выполняется инструкцией array[i] *= 2. То есть каждое число в массиве удваивается.

// 5. После завершения цикла for все элементы массива array будут изменены, так как каждый из них был умножен на 2.

// 6. Затем функция завершается, и управление возвращается к вызывающему коду.

// 7. В главной программе вызывается функция foo(numbers) с массивом numbers в качестве аргумента.

// 8. После выполнения функции foo, массив numbers изменен, и все его элементы удвоены.

// 9. С помощью console.log(numbers) выводится в консоль измененный массив numbers.

// 10. В результате выполнения кода вы увидите измененный массив numbers, в котором каждый элемент будет умножен на 2.

// ----------------------------------Примеры выполнения функции с учётом области видимости:

// В примере ниже в первую очередь выполняется суммирование локальной переменной (const c = 10).
// Поэтому до глобальной переменной (const c = 20) очередь просто не доходит.

// const c = 20;
// function foo(a, b) {
//   const c = 10;
//   const result = a + b + c;
//   console.log(result); //Вывести результат в консоль
//   return result; //Вернуть результат
// }
// foo(5, 15);

// --------// Вариант 1

// function showMessage() {
//   console.log('Сообщение');
// }
// showMessage();

// --------// Вариант 2

// showMessage();

// function showMessage() {
//   console.log('Сообщение');
// }

// Если переменная объявлена внутри функции, то с ней можно работать только внутри этой функции.
// Если переменная объявлена за пределами функции, то с ней можно работать как внутри функции так и за её пределами.

// -------------------------------------// Параметры (аргументы) функции

// function calcSum(numOne, numTwo) { // При объявлении функции значения в круглых скобках являются параметрами функции
//   console.log(`Переменная numOne: ${numOne}`);
//   console.log(`Переменная numTwo: ${numTwo}`);

//   let numSum = numOne + numTwo;
//   console.log(`Сумма ${numSum}`);
// }
// calcSum(12, 23); // При вызове функции значения в круглых скобках являются аргументами

// ---------------------------------------Возврат результата работы функции (return)

// function calcSum(numOne, numTwo) {
//   let numSum = numOne + numTwo;
//Возврат
//   return numSum;
//Дальше код не выполняется
// }
// let funcResult = calcSum(12, 27);
// console.log(`Сумма :${funcResult}`);

// --------------------------------------Рекурсия (случай когда функция вызывает саму себя)

// ---------------Способ № 1

// function calcSum(numOne, numTwo) {
//   let result = 1;
//Умножаем result на значение numOne numTwo кол-во раз в цикле
//   for (let i = 0; i < numTwo; i += 1) {
//     result *= numOne;
//   }
//   return result;
// }
// console.log(calcSum(2, 3));

// -------------Способ № 2

// function calcSum(numOne, numTwo) {
//   if (numTwo === 1) {
//     return numOne;
//   } else {
//     return numOne * calcSum(numOne, numTwo - 1);
//   }
// }

// console.log(calcSum(2, 3));

//! ---------------------------------------------// 2 Function Expression (Функциональное выражение)

// let showMessage = function () {
//   console.log('Привет!');
// };
// showMessage();

//! -------------------------------------------//  3 Принципиальная разница между Function Declaration и Function Expression заключается в том, что в Function Declaration вызывать функцию можно из любого места (перед объявлением функции или после - не важно), а в Function Expression вызвать функцию возможно, только после её создания

// ------Объявление функции (Function Declaration)

// getSum(); // Вызов функции
// function getSum() {
//   let sum = 1 + 2;
//   console.log(sum);
// }

// --------Функциональное выражение (Function Expression)

//-----------Пример 1

// let showMessage = function () {
//   console.log('Привет!');
// }; // Здесь обязательно нужно ставить точку с запятой
// showMessage();

// -----------Пример 2

// let getMessage = function (text, name) {
//     return text + ', ' + name + '!';
// };
// console.log(getMessage('Привет', 'Вася'));

//! ----------------------------------------// 4 Функции стрелки (arrow functions)

// let getMessage = (text, name) => text + ', ' + name + '!';
// console.log(getMessage('Привет', 'Вася'));

//! ----------------------------------------// 5 Планирование setTimeout и setInterval

// Чтобы реализовать планирование вызова функции существуют два метода:
// 1. setTimeout - позволяет один раз вызвать функцию, через определенное время
// 2. setInterval - позволяет периодически вызывать функцию, через определенный интервал времени

// -------------setTimeout-------------

// -------------Пример 1

// function showMessage(text, name) {
//   console.log(`${text}, ${name}!`);
// }
// setTimeout(showMessage, 3000, 'Привет', 'Вася'); //3000 - это означает задержку времени в миллисекундах

// -------------Пример 2

// function showNumber(num) {
//   console.log(num);
//   if (num < 5) {
//     setTimeout(showNumber, 3000, (num += 2));
//   }
// }
// setTimeout(showNumber, 3000, 1);

// -------------setInterval--------------

// function showMessage(text, name) {
//   console.log(`${text}, ${name}!`);
// }
// setInterval(showMessage, 3000, 'Привет', 'Вася'); //3000 - это означает задержку времени в миллисекундах

//!---------------------------------------------------Практика---------------------------------------------------

// Задача 1 (Кто быстрее попадёт в консоль, Вася или Коля?)

// function showName() {
//   console.log('Вася !');
// }
// setTimeout(showName, 3000);
// console.log('Коля!');

//Задача 2 (Верно ли вызвана функция?)

// showMessage();
// function showMessage() {
//   console.log('Сообщение');
// }

//Задача 3 (Верно ли вызвана функция?)

// showMessage();
// let showMessage = function () {
//   console.log('Сообщение');
// };

//Задача 4 (Как решить проблему?)

// 'use strict';
// if (2 > 1) {
//   function showMessage() {
//     console.log('Сообщение');
//   }
// }
// showMessage();

// Решение 4 задачи:

// 'use strict';
// function showMessage() {
//   console.log('Сообщение');
// }
// if (2 > 1) {
//   showMessage();
// }
