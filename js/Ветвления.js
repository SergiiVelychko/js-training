// ------------------------------------Условные операторы if-else и if-else-if--------------------------------

// --------------------------------------------Блок if-else---------------------------------------------

// Пример 1 (В данном примере код внутри фигурных скобок не выполнится,
// потому что выражение внутри круглых скобок возвращает false)

// let message = 'Привет фрилансер!';
// let first = 5;
// let second = 10;
// if (first === second) {
//   console.log(message);
// }

// Пример 2 (В данном примере код внутри фигурных скобок выполнится,
// потому что выражение внутри круглых скобок возвращает true)

// let message = 'Привет фрилансер!';
// let first = 5;
// let second = 10;
// if (first < second) {
//   console.log(message);
// }

// Пример 3 (В данном примере код внутри фигурных скобок выполнится,
// потому что выражение внутри круглых скобок возвращает true)

// let message = 'Привет фрилансер!';
// let number = 0;
// if (number > 1) {
//   console.log(message);
// } else {
//   console.log('Условие не выполнено : (');
// }

// ------------------------------------------Блок if-else-if-------------------------------------------

// Пример 1

// let message = 'Привет фрилансер!';
// let number = 5;
// if (number > 50) {
//   console.log('5 больше 50');
// } else if (number > 30) {
//   console.log('5 больше 30');
// } else if (number > 10) {
//   console.log('5 больше 10');
// } else if (number > 1) {
//   console.log('5 больше 1');
// } else {
//   console.log('Условие не выполнено : (');
// }

// Пример 2

// let message = 'Привет';
// let messageEnd;
// if (5 > 1) {
//   messageEnd = ', Вася';
// } else {
//   messageEnd = ', Оля';
// }
// message += messageEnd;
// console.log(message);

// ---------------------------------------------Условный оператор "?"----------------------------------------

// Данный условный оператор рекомендуется использовать только как вариант замены блока if-else.
// Для замены блока if-else-if данный условный оператор применять не рекомендуется.

// let message = 'Привет';
// let messageEnd = 5 > 1 ? ', Вася!' : ', Оля!';

// message += messageEnd;
// console.log(message);

// ----------------------------------------------------Тернарный оператор--------------------------------------------------

// Тернарный оператор используется как более синтаксически краткая замена инструкции if...else,
// когда одной и той же переменной необходимо присвоить разные значения по условию.

// Тернарный оператор должен использоваться в простых операциях присваивания или возврата.
// Его использование для описания сложных ветвлений - плохая практика (антипаттерн).

// {/* <условие> ? <выражение_если_условие_истинно> : <выражение_если_условие_ложно>  */}

// Работает по такой схеме:

// Вычисляется условие.
// Если условие истинно, то есть приводится к true, вычисляется выражение после ?.
// Если условие ложно, то есть приводится к false, вычисляется выражение после :.
// Значение вычисленного выражения возвращается как результат работы тернарного оператора.

// Ниже будут варианты ветвления с помощью операторов if...else и тернарного оператора:

// Пример 1:

// let type;
// const age = 20;
// if (age >= 18) {
//   type = "adult";
// } else {
//   type = "child";
// }
// console.log(type); // "adult"

// Выполним рефакторинг заменив if...else тернарным оператором.

// const age = 20;
// const type = age >= 18 ? "adult" : "child";
// console.log(type); // "adult"

// Пример 2:

// const num1 = 5;
// const num2 = 10;
// let biggerNumber;
// if (num1 > num2) {
//   biggerNumber = num1;
// } else {
//   biggerNumber = num2;
// }
// console.log(biggerNumber); // 10

// Выполним рефакторинг заменив if...else тернарным оператором.

// const num1 = 5;
// const num2 = 10;
// const biggerNumber = num1 > num2 ? num1 : num2;
// console.log(biggerNumber); // 10

// -----------------------------------------------------Инструкция switch------------------------------------------------------

// В некоторых случаях неудобство чтения сложных ветвлений if...else можно избежать используя более «плоский» синтаксис инструкции ветвления switch.

// Область применения switch ограничена задачами с одним общим вопросом (что сравнивать) и множеством вариантов ответов           (с чем сравнивать).

// Его синтаксис состоит из блока switch(значение) - что нужно сравнить и множества отдельных случаев case значение - с чем нужно сравнить. Для сравнения используется оператор строгого равенства ===. То есть нельзя сравнить на больше или меньше, только на равенство.

// switch (значение) {
//     case значение:
//       инструкции;
//       break;

//     case значение:
//       инструкции;
//       break;

//     default:
//       инструкции;
//   }

// Значение в блоке switch(значение) - строка или число, которое сравнивается на строгое равенство со всеми значениями в блоках case значение по порядку, сверху вниз.

// Оператор break в завершении каждого блока case необходим чтобы прервать дальнейшие проверки и сразу перейти к коду за switch в том случае, когда проверка на равенство вернула true.

// Если ни одного совпадения значений не произошло, необходимо выполнить код по умолчанию, как в блоке else для инструкции if...else. Для этого после всех блоков case добавляется блок default. Оператор break после блока default не нужен, так как это и так последнее что будет выполнено в switch и управление будет передано коду за ним.

// let cost;
// const subscription = "premium";

// switch (subscription) {
//   case "free":
//     cost = 0;
//     break;

//   case "pro":
//     cost = 100;
//     break;

//   case "premium":
//     cost = 500;
//     break;

//   default:
//     console.log("Invalid subscription type");
// }

// console.log(cost); // 500

// Если оператор break будет отсутствовать, то после того как выполнится какое-то условие case, все последующие за ним блоки кода будут выполняться один за другим, что может привести к нежелательным последствиям при неверном применении.
